#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var https = require('https');
var fs = require('fs')

const IN_SERVER = 1

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

app.get('/', function(req, res) {
    if(req.protocol === 'https') {
        res.status(200).send('Welcome to Safety Land!');
    }
    else {
        res.status(200).send('Welcome!');
    }
});

/**
 * Create HTTP server.
 */

var server = null

if (IN_SERVER){
	try{
		var privateKey  = fs.readFileSync('/home/public/weight/private.pem', 'utf8');
		var certificate = fs.readFileSync('/home/public/weight/file.crt', 'utf8');
		var credentials = {key: privateKey, cert: certificate};
		console.log(credentials);
		server = https.createServer(credentials,app);
		console.log(https);
		console.log('use https');
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening);
	}catch(e){
		console.log(e)
	}
}
else {
    server = http.createServer(app);
	console.log('use http')
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
}

/**
 * Listen on provided port, on all network interfaces.
 */



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
